package com.paul;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.TimeZone;
import edu.virginia.dtc.Tvector.Tvector;
import Jama.*;

public class OptCORR_processing {

	// KF system storage
    double[][] KFstate_init_2x1 = {{0.0}, {0.0}};
	Matrix KFinput = new Matrix(KFstate_init_2x1);
	double[][] KFstate_init_8x1 = {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}};
	Matrix KFstate = new Matrix(KFstate_init_8x1);
	Matrix KFoutput = new Matrix(KFstate_init_8x1);
	
	// KF output storage
	public double[][] Est_states_init = new double[120][8];
	Matrix Est_states = new Matrix(Est_states_init);
	
	// operating point
//	  public double G_op;
//    public double Gsc_op;
//    public double X_op;
//    public double Ip_op;
//    public double Isc2_op;
//    public double Isc1_op;
//    public double Q1_op;
//    public double Q2_op; 
    
    // other parameters
	public double delta = -115.1700;
	Matrix delta_tilde = new Matrix(72, 1, delta);
	public double Gref = 226.78; 
	Matrix Ustartemp;
    	
    // KF matrices, obtained in MATLAB (with all operating points and initial conditions done)
    
    double[][] Akf_ini = {{0.9450625168591, -393.2106526246453, -0.0000079315816, -0.0002866957717, -0.0073489187690,   -0.8993386378713,  0.0000425539696,  0.0002279502954},
				          {				 0,    0.4999425665019,  0.0000000514295,  0.0000013115307,  0.0000188765707, 				   0,		 		 0,				   0},
				          {				 0, 				 0,  0.9028774356089, 				 0, 			   0, 				   0, 				 0, 			   0},
				          {				 0, 				 0,  0.0922456016793,  0.9028774356089, 			   0, 				   0, 				 0, 			   0},
				          {				 0, 				 0,  0.0033099657621,  0.0544389065953,  0.2810718671304, 				   0, 				 0, 			   0},
				          {0.3542997284575,  -86.2986122961389, -0.0000007160217, -0.0000328088299, -0.0011620275045,    0.0443745779625,  0.0000060164672,  0.0000455773922},
				          {				 0, 				 0, 			   0, 			     0, 			   0,  -96.5522366208292,  0.6572515813545,		 		   0},
				          {				 0, 				 0, 			   0, 				 0, 			   0, -815.4272603553949,  0.3320343716583,  0.9420938782596}};
	Matrix Akf = new Matrix(Akf_ini);

	double[][] Bkf_ini = {{-0.000008513292416, 0.8993386378713},
			    	      {0.000000071358124, 0},
			    	      {4.753059781756988, 0},
			    	      {0.238672603712334, 0},
			    	      {0.006173436008643, 0},
			    	      {-0.000000634826663, 0.5904433905152},
			    	      {0, 96.5522366208292},
			    	      {0, 815.4272603553949}};
	Matrix Bkf = new Matrix(Bkf_ini);

    double[][] Ckf_ini={{0, 0, 0, 0, 0, 0.5475892392573, 0, 0},
    					 {1, 0, 0, 0, 0, -0.7487203858049, 0, 0},
    					 {0, 1, 0, 0, 0, 0, 0, 0},
    					 {0, 0, 1, 0, 0, 0, 0, 0},
    					 {0, 0, 0, 1, 0, 0, 0, 0},
    					 {0, 0, 0, 0, 1, 0, 0, 0},
    					 {0, 0, 0, 0, 0, 0.5475892392573, 0, 0},
    					 {0, 0, 0, 0, 0, -146.9030115102287, 1, 0},
    					 {0, 0, 0, 0, 0, -813.7728403990428, 0, 1}};
    Matrix Ckf = new Matrix(Ckf_ini);

    double[][] Dkf_ini={{0, 0.4524107607427},
		        	     {0, 0.7487203858049},
		        	     {0, 0},
		        	     {0, 0},
		        	     {0, 0},
		        	     {0, 0},
		        	     {0, 0.4524107607427},
		        	     {0, 146.9030115102287},
		        	     {0, 813.7728403990428}};
    Matrix Dkf = new Matrix(Dkf_ini);
    
	// u_LA generation storage
    public Matrix u_LA_KF_2lastdays;
	public Matrix u_LA_2lastdays;
	public double injection;
	public double u_LA_init_cond = 443.3766506278234;
	public double u_LA_FF_A = 0.999720039196342;
	public double u_LA_FF_B = 0.999860013065752;
    	
 // KF estimate from the Simulator (1st meal)
 	double[][] x_ini = {{9.666672961387889e-01},
					    {5.395372645858502e-04},
					    {1.890807473827476e+02},
					    {1.125582688460508e+02},
					    {8.543562871959665e+00},
					    {1.123329427067773e+00},
					    {6.880088106873392e+01},
					    {9.733851922892014e+02}};
 	Matrix x = new Matrix(x_ini);
 	
 	// KF estimate from the Simulator (2nd meal)
// 		double[][] x_ini = {{-74.79604216467},
// 		 					{0.00071874610},
// 		 					{102.50630967861},
// 		 					{120.51782709266},
// 		 					{9.81870028662},
// 		 					{-75.40529592361},
// 							{-336.64178004021},
// 							{-13635.09283323078}};
// 		Matrix x = new Matrix(x_ini);	  
 	
	
 	// CGM vector from the Simulator (1st meal)
 	double[][] CGM_ini = {{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228}};
 	Matrix pre_CGM_array = new Matrix(CGM_ini);
 	Matrix CGM_array = pre_CGM_array.transpose();
 	
 	// CGM vector from the Simulator (2nd meal)
// 	double[][] CGM_ini = {{146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151}};
// 	Matrix pre_CGM_array = new Matrix(CGM_ini);
// 	Matrix CGM_array = pre_CGM_array.transpose();
 	
			
	public OptCORR_processing(OptCORR_param optcorr_param) {
    	
	 	// u_LA vector from the Simulator (1st meal)
	 	double[][] u_LA_2lastdays_ini = {{2.261112556636594e+01, 2.240549095179500e+01, 2.220014402425656e+01, 2.199508438127054e+01, 2.179031162092002e+01, 2.158582534185031e+01, 2.138162514326822e+01, 2.117771062494128e+01, 2.097408138719702e+01, 2.077073703092204e+01, 2.056767715756132e+01, 2.036490136911747e+01, 2.016240926814989e+01, 1.996020045777396e+01, 1.975827454166039e+01, 1.955663112403428e+01, 1.935526980967449e+01, 1.915419020391278e+01, 1.895339191263304e+01, 1.875287454227058e+01, 1.855263769981125e+01, 1.835268099279078e+01, 1.815300402929404e+01, 1.795360641795405e+01, 1.775448776795145e+01, 1.755564768901353e+01, 1.735708579141383e+01, 1.715880168597085e+01, 1.696079498404773e+01, 1.676306529755125e+01, 1.656561223893117e+01, 1.636843542117944e+01, 1.617153445782943e+01, 1.597490896295515e+01, 1.577855855117061e+01, 1.558248283762897e+01, 1.538668143802170e+01, 1.519115396857801e+01, 1.499590004606404e+01, 1.480091928778201e+01, 1.460621131156952e+01, 1.441177573579894e+01, 1.421761217937650e+01, 1.402372026174152e+01, 1.383009960286580e+01, 1.363674982325280e+01, 1.344367054393686e+01, 1.325086138648249e+01, 1.305832197298379e+01, 1.286605192606334e+01, 1.267405086887187e+01, 1.248231842508718e+01, 1.229085421891366e+01, 1.209965787508139e+01, 1.190872901884546e+01, 1.171806727598529e+01, 1.152767227280378e+01, 1.133754363612667e+01, 1.114768099330178e+01, 1.095808397219821e+01, 1.076875220120581e+01, 1.057968530923422e+01, 1.039088292571226e+01, 1.020234468058721e+01, 1.001407020432405e+01, 9.826059127904774e+00, 9.638311082827560e+00, 9.450825701106211e+00, 9.263602615269306e+00, 9.076641458359536e+00, 8.889941863932993e+00, 8.703503466058429e+00}};
	 	Matrix pre_u_LA_2lastdays = new Matrix(u_LA_2lastdays_ini);
	 	u_LA_2lastdays = pre_u_LA_2lastdays.transpose();
	 	
	 	// u_LA vector from the Simulator (2nd meal)
//	 	double[][] u_LA_2lastdays_ini = {{8.70350346605843, 8.51732589931645, 8.33140879879903, 8.14575180010856, 7.96035453935726, 7.77521665316648, 7.59033777866588, 7.40571755349283, 7.22135561579158, 7.03725160421266, 6.85340515791221, 6.66981591655112, 6.48648352029440, 6.30340760981051, 6.12058782627061, 5.93802381134783, 5.75571520721674, 5.57366165655228, 5.39186280252956, 5.21031828882265, 5.02902775960433, 4.84799085954508, 4.66720723381254, 4.48667652807069, 4.30639838847933, 4.12637246169322, 3.94659839486154, 3.76707583562698, 3.58780443212535, 3.40878383298456, 3.23001368732429, 3.05149364475486, 2.87322335537706, 2.69520246978100, 2.51743063904566, 2.33990751473822, 2.16263274891334, 1.98560599411239, 1.80882690336285, 1.63229513017770, 1.45601032855456, 1.27997215297519, 1.10418025840469, 0.928634300290874, 0.753333934563685, 0.578278817634246, 0.403468606394544, 0.228902958216501, 0.0545815309514097, -0.119496017070873, -0.293330027042344, -0.466920839677680, -0.640268795214976, -0.813374233416226, -0.986237493568236, -1.15885891448299, -1.33123883449851, -1.50337759147956, -1.67527552281808, -1.84693296543411, -2.01835025577630, -2.18952772982259, -2.36046572308089, -2.53116457058971, -2.70162460691882, -2.87184616617003, -3.04182958197757, -3.21157518750901, -3.38108331546582, -3.55035429808394, -3.71938846713460, -3.88818615392479}};
//	 	Matrix pre_u_LA_2lastdays = new Matrix(u_LA_2lastdays_ini);
//	 	Matrix u_LA_2lastdays = pre_u_LA_2lastdays.transpose();
	 		
	 	// u_LA KF vector from the Simulator (1st meal)
	 	double[][] u_LA_KF_2lastdays_ini = {{-4.56982856802199, -4.57551431179012, -4.58119846377285, -4.58688102441582, -4.59256199416454, -4.59824137346442, -4.60391916276070, -4.60959536249852, -4.61526997312291, -4.62094299507874, -4.62661442881079, -4.63228427476369, -4.63795253338196, -4.64361920511000, -4.64928429039206, -4.65494778967229, -4.66060970339472, -4.66627003200323, -4.67192877594159, -4.67758593565345, 5.35278873530384, 5.34432504762109, 5.33586372943913, 5.32740478009461, 5.31894819892436, 5.31049398526536, 5.30204213845482, 5.29359265783009, 5.28514554272876, 5.27670079248856, 5.26825840644742, 5.25981838394346, 5.25138072431498, 5.24294542690047, 5.23451249103861, 5.22608191606826, 5.21765370132843, 5.20922784615839, 5.20080434989753, 5.19238321188546, 5.18396443146195, 5.17554800796696, 5.16713394074067, 5.15872222912340, 5.15031287245568, 5.14190587007820, 5.13350122133187, 5.12509892555775, 5.11669898209712, 5.10830139029141, 5.09990614948223, 5.09151325901144, 5.08312271822100, 5.07473452645310, 5.06634868305012, 5.05796518735459, 5.04958403870925, 5.04120523645702, 5.03282877994101, 5.02445466850449, 5.01608290149094, 5.00771347824401, 4.99934639810754, 4.99098166042556, 4.98261926454225, 4.97425920980201, 4.96590149554942, 4.95754612112923, 4.94919308588638, 4.94084238916598, 4.93249403031335, 4.92414800867398, 4.91580432359353, 4.90746297441786, 4.89912396049301, 4.89078728116520, 4.88245293578083, 4.87412092368649, 4.86579124422896, 4.85746389675518, 4.84913888061229, 4.84081619514762, 4.83249583970866, 4.82417781364308, 4.81586211629878, 4.80754874702378, 4.79923770516633, 4.79092899007484, 4.78262260109790, 4.77431853758429, 4.76601679888298, 4.75771738434310, 4.74942029331399, 4.74112552514516, 4.73283307918629, 4.72454295478724, 4.71625515129809, 4.70796966806907, 4.69968650445058, 4.69140565979324, 4.68312713344783, 4.67485092476531, 4.66657703309682, 4.65830545779369, 4.65003619820743, 4.64176925368973, 4.63350462359246, 4.62524230726768, 4.61698230406760, 4.60872461334467, 4.60046923445147, 4.59221616674078, 4.58396540956556, 4.57571696227894, 4.56747082423426, 4.55922699478501, 4.55098547328489, 4.54274625908774, 4.53450935154762, 4.52627475001875}};
	 	Matrix pre_u_LA_KF_2lastdays = new Matrix(u_LA_KF_2lastdays_ini);
	 	u_LA_KF_2lastdays = pre_u_LA_KF_2lastdays.transpose();
	 	
	 	// u_LA KF vector from the Simulator (2nd meal)
//	 	double[][] u_LA_KF_2lastdays_ini = {{2.60748173517912, 2.59978662585041, 2.59209367085068, 2.58440286957683, 2.57671422142588, 2.56902772579504, 2.56134338208169, 2.55366118968339, 2.54598114799785, 2.53830325642295, 2.53062751435674, 2.52295392119745, 2.51528247634347, 2.50761317919335, 2.49994602914583, 2.49228102559980, 2.48461816795432, 2.47695745560863, 2.46929888796212, 2.46164246441436, 2.45398818436510, 2.44633604721422, 2.43868605236181, 2.43103819920812, 2.42339248715353, 2.41574891559864, 2.40810748394418, 2.40046819159107, 2.39283103794039, 2.38519602239338, 2.37756314435146, 2.36993240321621, 2.36230379838937, 2.35467732927289, 2.34705299526882, 2.33943079577942, 2.33181073020712, 2.32419279795450, 2.31657699842433, 2.30896333101950, 2.30135179514312, 2.29374239019844, 2.28613511558889, 2.27852997071805, 2.27092695498967, 2.26332606780770, 2.25572730857621, 2.24813067669945, 2.24053617158187, 2.23294379262803, 2.22535353924272, 2.21776541083084, 2.21017940679749, 2.20259552654792, 2.19501376948756, 2.18743413502201, 2.17985662255701, 2.17228123149848, 2.16470796125254, 2.15713681122541, 2.14956778082353, 2.14200086945348, 2.13443607652203, 2.12687340143607, 2.11931284360272, 2.11175440242921, 2.10419807732297, 2.09664386769158, 2.08909177294278, 2.08154179248450, 2.07399392572482, 2.06644817207198, 2.05890453093440, 2.05136300172065, 2.04382358383949, 2.03628627669981, 2.02875107971070, 2.02121799228139, 2.01368701382129, 2.00615814373997, 1.99863138144718, 1.99110672635280, 1.98358417786691, 1.97606373539974, 1.96854539836169, 1.96102916616332, 1.95351503821535, 1.94600301392869, 1.93849309271438, 1.93098527398364, 1.92347955714788, 1.91597594161863, 1.90847442680761, 1.90097501212671, 1.89347769698798, 1.88598248080361, 1.87848936298598, 1.87099834294765, 1.86350942010130, 1.85602259385982, 1.84853786363623, 1.84105522884372, 1.83357468889567, 1.82609624320559, 1.81861989118717, 1.81114563225427, 1.80367346582092, 1.79620339130128, 1.78873540810971, 1.78126951566071, 1.77380571336897, 1.76634400064932, 1.75888437691675, 1.75142684158643, 1.74397139407370, 1.73651803379405, 1.72906676016313, 1.72161757259677, 1.71417047051094, 1.70672545332180}};
//	 	Matrix pre_u_LA_KF_2lastdays = new Matrix(u_LA_KF_2lastdays_ini);
//	 	Matrix u_LA_KF_2lastdays = pre_u_LA_KF_2lastdays.transpose();
		
		// u_LA_generation
//		gen_u_LA(injection, u_LA_init_cond, u_LA_FF_A, u_LA_FF_B);
		
		// KF estimation
	    cal_KF_estimation(optcorr_param, CGM_array);

        // advised bolus calculation    
        cal_bolus_advised(optcorr_param);
	}
   
	public void gen_u_LA(double injection, double u_LA_init_cond, double u_LA_FF_A, double u_LA_FF_B) {
		
		double u_LA_state = u_LA_init_cond; 
		double[][] u_LA_KF_2lastdays_ini = new double[120][1];
		double[][] u_LA_2lastdays_ini = new double[72][1];
		double[][] u_LA_2lastdays_ini_temp = new double[360][1];
		
			
		// u_LA calculation loop (2 hours to get to the advice time, and 6 more hours for the advice calculation)
		int u_LA_ii = 0;
		int u_LA_ii_temp = 0;
		int u_LA_ii_count = 0;
		
		// calculate the whole u_LA curve for 6 hours at 1-minute increment
		// use first 120 values for u_LA_KF, the rest 360 values for u_LA
	    while (u_LA_ii <= 479){
	    	
	    	if (u_LA_ii == 0) {
	    		injection = 216.8313642870525; // pmol/kg/min
	    	} else {
	    		injection = 0;
	    	}
	    	
	    	u_LA_state = u_LA_FF_A*u_LA_state + u_LA_FF_B*injection;
	    	u_LA_state = u_LA_state*0.00028*88.002436694267715/6;
	    	
	    	if (u_LA_ii < 120) {
	    		u_LA_KF_2lastdays_ini[u_LA_ii][0] = u_LA_state;
	    	} else {
	    		u_LA_ii_temp = u_LA_ii - 120;
	    		u_LA_2lastdays_ini_temp[u_LA_ii_temp][0] = u_LA_state;
	    	}
	    		    	
	    	u_LA_ii+=1;
	    }
	    
	    // from 360 u_LA values take every 5th
	    int ii = 0;
	    int jj = 0;
        while (ii <= 359){
        	u_LA_2lastdays_ini[jj][0] = u_LA_2lastdays_ini_temp[ii][0];
        	ii+=5;
        	jj++;
        }
        	    	    
        u_LA_KF_2lastdays = new Matrix(u_LA_KF_2lastdays_ini);
	 	u_LA_2lastdays = new Matrix(u_LA_2lastdays_ini);

	}
	
	public void cal_KF_estimation(OptCORR_param optcorr_param, Matrix CGM_array){
		
	    // KF initial states
//		G_op 	 = 228;
//		Gsc_op   = G_op;
//		X_op     = optcorr_param.model.SG*optcorr_param.model.Gb/G_op-optcorr_param.model.SG;
//		Ip_op    = (X_op/optcorr_param.model.SI+optcorr_param.model.Ib)*optcorr_param.model.Vi*optcorr_param.model.BW;
//		Isc2_op  = optcorr_param.model.kcl*Ip_op/optcorr_param.model.kd;
//		Isc1_op  = Isc2_op;
//		Q1_op    = 0;
//		Q2_op    = 0; 
//		
//		double[][] xref_init_8x1 = {{Gref, X_op, Isc1_op, Isc2_op, Ip_op, Gsc_op, Q1_op, Q2_op}};
//		Matrix xref = new Matrix(xref_init_8x1);

		
		// Kalman Filter Loop 
		int ii = 0;
        while (ii <= 119){
	    
        	KFinput.set(0, 0, u_LA_KF_2lastdays.get(ii,0));
			KFinput.set(1, 0, CGM_array.get(ii,0) - Gref);
			KFoutput = Ckf.times(KFstate).plus(Dkf.times(KFinput));
			KFstate = Akf.times(KFstate).plus(Bkf.times(KFinput));
		
		    ii+=5;
        }
        Est_states = KFstate;

	}
		
	public void  cal_bolus_advised(OptCORR_param optcorr_param) {

		// u* formula initialization
		double[][] phi_init_1x1 = {{0.0}};
		Matrix phi = new Matrix(phi_init_1x1);
		
		double[][] K_init = new double[8][1];
		Matrix K = new Matrix(K_init);
		
		double[][] M_init = new double[1][72];
		Matrix M = new Matrix(M_init);
		
		double[][] N_init = new double[1][576];
		Matrix N = new Matrix(N_init);
		
		phi = optcorr_param.model.B0script.transpose().times(optcorr_param.model.Cscript.transpose()).times(optcorr_param.model.Qscript).times(optcorr_param.model.Cscript).times(optcorr_param.model.B0script).plus(optcorr_param.model.Rscript); 
	   			
//		K = phi.inverse().uminus().times(optcorr_param.model.B0script.transpose()).times(optcorr_param.model.Cscript.transpose()).times(optcorr_param.model.Qscript).times(optcorr_param.model.Cscript).times(optcorr_param.model.Ascript);
//        M = phi.inverse().uminus().times(optcorr_param.model.B0script.transpose()).times(optcorr_param.model.Cscript.transpose()).times(optcorr_param.model.Qscript).times(optcorr_param.model.Cscript).times(optcorr_param.model.Bscript);
//	    N = phi.inverse().times(optcorr_param.model.B0script.transpose()).times(optcorr_param.model.Cscript.transpose()).times(optcorr_param.model.Qscript);
//	   	   
	    double[][] K_init2 = {{1.648820228773043e-02, -1.454159162093619e+01, -7.636454592399468e-04, -7.610922483068327e-04, -5.946038099618998e-04, 0, 9.277585651743209e-05, 9.044979965323012e-05}};
	    K = new Matrix(K_init2);
	    
	    double[][] M_init2 = {{-3.817451555744525e-03, -3.810191102615141e-03, -3.794431029522526e-03, -3.770353963769467e-03, -3.738251021083727e-03, -3.698502407539649e-03, -3.651557235798405e-03, -3.597914618012640e-03, -3.538106945850343e-03, -3.472685620940972e-03, -3.402209176238910e-03, -3.327233585829167e-03,-3.248304510356792e-03, -3.165951220003926e-03, -3.080681952126985e-03, -2.992980483946493e-03, -2.903303726051097e-03, -2.812080167146247e-03, -2.719709023256604e-03, -2.626559965068455e-03, -2.532973315232958e-03, -2.439260623367557e-03, -2.345705540381367e-03, -2.252564925818420e-03, -2.160070132363624e-03, -2.068428420678254e-03, -1.977824465495636e-03, -1.888421920565248e-03, -1.800365015719229e-03, -1.713780164167238e-03, -1.628777562206580e-03, -1.545452766954289e-03, -1.463888240543701e-03, -1.384154851546408e-03, -1.306313326238101e-03, -1.230415643771260e-03, -1.156506370388538e-03, -1.084623928540209e-03, -1.014801797182288e-03, -9.470696396479109e-04, -8.814543553158658e-04, -8.179810508538411e-04, -7.566739260913204e-04, -6.975570685739100e-04, -6.406551495574621e-04, -5.859940126014101e-04, -5.336011439951645e-04, -4.835060119723464e-04, -4.357402590020958e-04, -3.903377283556318e-04, -3.473343025847209e-04, -3.067675274668802e-04, -2.686759903175217e-04, -2.330984162922124e-04, -2.000724403675273e-04, -1.696330060998030e-04, -1.418103351081450e-04, -1.166274037888262e-04, -9.409685670673691e-05, -7.421728087619314e-05, -5.696876477287526e-05, -4.230767661476953e-05, -3.016063071092014e-05, -2.041769338202597e-05, -1.292505995101114e-05, -7.477805454659450e-06, -3.814047544693591e-06, -1.613256150443295e-06, -5.039084064997788e-07, -8.937956188099745e-08, -3.871643091594777e-09, 0}};
	    M = new Matrix(M_init2);
	    
	    double[][] N_init2 = {{0, -2.812334297572259e-07, -6.197234877298283e-06, -2.978797702320113e-05, -7.876241474640502e-05, -1.540454835945141e-04, -2.523979908398368e-04, -3.688024748956158e-04, -4.978819225736771e-04, -6.346061132286021e-04, -7.745863383562209e-04, -9.141564865549087e-04, -1.050351897148977e-03, -1.180844315438141e-03, -1.303862103095906e-03, -1.418109615422560e-03, -1.522691933205700e-03, -1.617047316743542e-03, -1.700887913628768e-03, -1.774148409794166e-03, -1.836941962147485e-03, -1.889522637976498e-03, -1.932253585001042e-03, -1.965580204053962e-03, -1.990007663376018e-03, -2.006082164813289e-03, -2.014375441103878e-03, -2.015472027109344e-03, -2.009958905342446e-03, -1.998417177411118e-03, -1.981415458380458e-03, -1.959504731047172e-03, -1.933214432262705e-03, -1.903049574257404e-03, -1.869488730898016e-03, -1.832982742399956e-03, -1.793954012614194e-03, -1.752796290973084e-03, -1.709874846827109e-03, -1.665526957516018e-03, -1.620062643341715e-03, -1.573765592865943e-03, -1.526894230837069e-03, -1.479682888727967e-03, -1.432343044491877e-03, -1.385064603847708e-03, -1.338017200307666e-03, -1.291351495360803e-03, -1.245200463816757e-03, -1.199680652373776e-03, -1.154893402073926e-03, -1.110926027507222e-03, -1.067852947478982e-03, -1.025736763407832e-03, -9.846292830165985e-04, -9.445724879506483e-04, -9.055994448395278e-04, -8.677351600351424e-04, -8.309973788372219e-04, -7.953973304749865e-04, -7.609404204708418e-04, -7.276268722831560e-04, -6.954523203242311e-04, -6.644083565881904e-04, -6.344830332116827e-04, -6.056613233368101e-04, -5.779255426579319e-04, -5.512557340183933e-04, -5.256300173852410e-04, -5.010249074742706e-04, -4.774156012282702e-04, -4.547762372713999e-04}};
	    N = new Matrix(N_init2);
	    
		System.out.println(K.getRowDimension());
		System.out.println(K.getColumnDimension());	
	    
		System.out.println(M.getRowDimension());
		System.out.println(M.getColumnDimension());	
	    
		System.out.println(N.getRowDimension());
		System.out.println(N.getColumnDimension());	
	    
		
	    Ustartemp = K.times(x).plus(M.times(u_LA_2lastdays)).plus(N.times(delta_tilde)); // U
//	    Ustartemp = K.times(Est_states).plus(M.times(u_LA_2lastdays)).plus(N.times(delta_tilde)); // U
	}
	
}
	